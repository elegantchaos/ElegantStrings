# --------------------------------------------------------------------------------
# This workflow was automatically generated by Action Status 2.0.6 (478).
# (see https://actionstatus.elegantchaos.com for more details)
# --------------------------------------------------------------------------------

name: Tests

on: [push, pull_request]

jobs:

    macOS-swift-53:
        name: macOS (Swift 5.3)
        runs-on: macos-11
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: |
            ls -d /Applications/Xcode*
            sudo xcode-select -s /Applications/Xcode_12.4.app
            xcodebuild -version
            swift --version
        - name: Swift Version
          run: swift --version
        - name: Test (Release)
          run: swift test --configuration release -Xswiftc -enable-testing --enable-test-discovery
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs


    macOS-swift-56:
        name: macOS (Swift 5.6)
        runs-on: macos-11
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: |
            ls -d /Applications/Xcode*
            sudo xcode-select -s /Applications/Xcode_13.2.1.app
            xcodebuild -version
            swift --version
        - name: Swift Version
          run: swift --version
        - name: Test (Release)
          run: swift test --configuration release -Xswiftc -enable-testing --enable-test-discovery
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs


    linux-swift-53:
        name: Linux (Swift 5.3)
        runs-on: ubuntu-18.04
        container: swift:5.3.3-bionic
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Swift Version
          run: swift --version
        - name: Test (Release)
          run: swift test --configuration release -Xswiftc -enable-testing --enable-test-discovery
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs


    linux-swift-56:
        name: Linux (Swift 5.6)
        runs-on: ubuntu-18.04
        container: swiftlang/swift:nightly-5.6-bionic
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Swift Version
          run: swift --version
        - name: Test (Release)
          run: swift test --configuration release -Xswiftc -enable-testing --enable-test-discovery
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs


    xcode-swift-53:
        name: iOS/tvOS/watchOS (Swift 5.3, Xcode 12.4)
        runs-on: macos-11
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: |
            ls -d /Applications/Xcode*
            sudo xcode-select -s /Applications/Xcode_12.4.app
            xcodebuild -version
            swift --version
        - name: XC Pretty
          run: sudo gem install xcpretty-travis-formatter
        - name: Detect Workspace & Scheme (iOS)
          run: |
            WORKSPACE="ElegantStrings.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep ElegantStrings-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="ElegantStrings-Package"
            else
            SCHEME="ElegantStrings"
            fi
            else
            SCHEME="ElegantStrings-iOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Test (iOS Release)
          run: |
            source "setup.sh"
            echo "Testing workspace $WORKSPACE scheme $SCHEME."
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=iPhone 11" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-iOS-test-release.log | xcpretty
        - name: Detect Workspace & Scheme (tvOS)
          run: |
            WORKSPACE="ElegantStrings.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep ElegantStrings-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="ElegantStrings-Package"
            else
            SCHEME="ElegantStrings"
            fi
            else
            SCHEME="ElegantStrings-tvOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Test (tvOS Release)
          run: |
            source "setup.sh"
            echo "Testing workspace $WORKSPACE scheme $SCHEME."
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=Apple TV" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-tvOS-test-release.log | xcpretty
        - name: Detect Workspace & Scheme (watchOS)
          run: |
            WORKSPACE="ElegantStrings.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep ElegantStrings-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="ElegantStrings-Package"
            else
            SCHEME="ElegantStrings"
            fi
            else
            SCHEME="ElegantStrings-watchOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Build (watchOS Release)
          run: |
            source "setup.sh"
            echo "Building workspace $WORKSPACE scheme $SCHEME."
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=Apple Watch Series 5 - 44mm" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-watchOS-build-release.log | xcpretty
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs


    xcode-swift-56:
        name: iOS/tvOS/watchOS (Swift 5.6, Xcode 13.2.1)
        runs-on: macos-11
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: |
            ls -d /Applications/Xcode*
            sudo xcode-select -s /Applications/Xcode_13.2.1.app
            xcodebuild -version
            swift --version
        - name: XC Pretty
          run: sudo gem install xcpretty-travis-formatter
        - name: Detect Workspace & Scheme (iOS)
          run: |
            WORKSPACE="ElegantStrings.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep ElegantStrings-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="ElegantStrings-Package"
            else
            SCHEME="ElegantStrings"
            fi
            else
            SCHEME="ElegantStrings-iOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Test (iOS Release)
          run: |
            source "setup.sh"
            echo "Testing workspace $WORKSPACE scheme $SCHEME."
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=iPhone 11" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-iOS-test-release.log | xcpretty
        - name: Detect Workspace & Scheme (tvOS)
          run: |
            WORKSPACE="ElegantStrings.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep ElegantStrings-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="ElegantStrings-Package"
            else
            SCHEME="ElegantStrings"
            fi
            else
            SCHEME="ElegantStrings-tvOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Test (tvOS Release)
          run: |
            source "setup.sh"
            echo "Testing workspace $WORKSPACE scheme $SCHEME."
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=Apple TV" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-tvOS-test-release.log | xcpretty
        - name: Detect Workspace & Scheme (watchOS)
          run: |
            WORKSPACE="ElegantStrings.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep ElegantStrings-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="ElegantStrings-Package"
            else
            SCHEME="ElegantStrings"
            fi
            else
            SCHEME="ElegantStrings-watchOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Build (watchOS Release)
          run: |
            source "setup.sh"
            echo "Building workspace $WORKSPACE scheme $SCHEME."
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=Apple Watch Series 5 - 44mm" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-watchOS-build-release.log | xcpretty
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs

